import json
import logging
import os
import pathlib
import subprocess
from collections import defaultdict
from datetime import datetime
from threading import RLock

from ryu.app.wsgi import ControllerBase
from ryu.lib import hub

from configuration import SDN_CONTROLLER_APP_KEY
from defense_managers.multipath_manager import FlowMultipathManager

CURRENT_PATH = pathlib.Path().absolute()
logger = logging.getLogger(__name__)
logger.setLevel(level=logging.WARNING)

class MultipathCoordinator(ControllerBase):

    def __init__(self, req, link, data, **config):
        super(MultipathCoordinator, self).__init__(req, link, data, **config)
        self.sdn_controller_app = data[SDN_CONTROLLER_APP_KEY]

        now = int(datetime.now().timestamp())
        self.multipath_report_folder = "multipath-%d" % (now)
        self.multipath_enabled = True  # If True, multipath functions enabled else, all switches work as L2 switch
        self.watch_generated_flows = False  # If flows generated by this class is reported, It is used to test
        self.flow_statistics_save_period = 100  # if watch_generated_flows True, defines flow statistics save period
        self.activation_delay = 1  # (sec.) flow is checked after activation_delay to active multipath
        self.min_packet_in_period = 10  # After activation delay, Multipath starts if flow packet count is greater than min_packet_in_period
        self.multipath_params = {  # if multipath_enabled is enabled, it defines parameters of multipath manager
            'forward_with_random_ip': True,  # random ip generation is activated.
            'random_ip_for_each_hop': True,  # if False, first node generates random ip
            'random_ip_subnet': "10.93.0.0",  # random ip subnet, default mask is 255.255.0.0
            'max_random_paths': 200,  # maximum random paths used in multipath manager
            'max_installed_path_count': 2,  # maximum flow count installed in switch for each path
            'max_time_period_in_second': 2,  # random path expire time in seconds.
            'lowest_flow_priority': 20000,  # minimum flow priority in random path flows
            'report_folder': self.multipath_report_folder
        }
        logger.warning("............................................................................")
        logger.warning("SDN CONTROLLER started - multipath enabled:  %s" % self.multipath_enabled)
        logger.warning(
            "Watch_generated_flows:  %s !!! All flows statistics will be saved." % self.watch_generated_flows)

        if self.multipath_enabled:
            logger.warning("..... multipath starts if activation_delay    :  %s" % self.activation_delay)
            logger.warning("..... multipath starts if min_packet_in_period:  %s" % self.min_packet_in_period)
            multipath_manager_params = json.dumps(self.multipath_params, indent=4, separators=(',', '= '))
            logger.warning("..... multipath manager params: \n%s" % multipath_manager_params)

        logger.warning("............................................................................")

        self.lock = RLock()


        self.flow_managers = defaultdict()

        self.statistics = defaultdict()
        self.statistics["flows"] = defaultdict()
        self.statistics["created-flow-count"] = 0
        self.statistics["removed-flow-count"] = 0
        if self.watch_generated_flows:
            hub.spawn_after(5, self._save_statistics_periodically)

        self.host_ip_map = self.sdn_controller_app.host_ip_map
        self.hosts = self.sdn_controller_app.hosts

        self.datapath_list = self.sdn_controller_app.datapath_list
        self.topology = self.sdn_controller_app.topology

    def _start_flow_manager(self, ipv4_src, ipv4_dst):

        with self.lock:
            src = self.host_ip_map[ipv4_src][2]
            dst = self.host_ip_map[ipv4_dst][2]
            h1 = self.hosts[src]
            h2 = self.hosts[dst]
            if (h1[0], h1[1], h2[0], h2[1], h1[2], h2[2]) in self.flow_managers:
                return

            dp_list = self.datapath_list

            flow_manager = FlowMultipathManager(self, self.topology, dp_list, h1[0], h1[1], h2[0], h2[1], h1[2], h2[2],
                                                **self.multipath_params)
            self.flow_managers[flow_manager.flow_info] = flow_manager
            flow_manager.get_active_path_port_for(dp_list[h1[0]])
            if logger.isEnabledFor(level=logging.WARNING):
                logger.warning(f"Initiate flow manager {flow_manager.flow_info} at {datetime.now()}")

    def flow_manager_is_destroying(self, flow):
        with self.lock:
            if flow.flow_info in self.flow_managers:
                del self.flow_managers[flow.flow_info]
                if logger.isEnabledFor(level=logging.WARNING):
                    logger.warning(f"Terminate flow manager {flow.flow_info}  at {datetime.now()}")


    def _save_statistics(self):

        report_path = os.path.join(CURRENT_PATH, "reports", self.multipath_report_folder)

        pathlib.Path(report_path).mkdir(parents=True, exist_ok=True)

        file_name = "%s-controller_flows.json" % (self.multipath_report_folder)

        file_path = os.path.join(report_path, file_name)
        comparator = lambda o: o.__str__() if isinstance(o, object) else None
        with open(file_path, 'w') as outfile:
            json.dump(self.statistics, outfile, default=comparator)
        subprocess.call(['chmod', "-R", '0777', report_path])

    def _save_statistics_periodically(self):
        sleep_time = self.flow_statistics_save_period
        while True:
            logger.warning(f'{datetime.now()} - SDN Contoller statistics will be saved after  {sleep_time} sec.')
            hub.sleep(sleep_time)
            self._save_statistics()
            logger.warning(f'{datetime.now()} - SDN Contoller statistics are saved.')
